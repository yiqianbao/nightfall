#!/bin/bash
set -e

GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

setups=()
setupList=""
completedSetups=()
completedSetupList=""
selectedSetupsIndexes=""
declare -i index=0

ZKPScheme="${ZKPScheme:-g16}"
printf "ZKP scheme ${RED}${ZKPScheme}${NC} will be used.\n"
printf "You can specify scheme by env variable ${GREEN}ZKPScheme${NC}. Available options are g16 (default) and gm17\n"

# Get available trusted setup names, excluding the 'common' directory
pushd zkp/code/${ZKPScheme}/
for d in *
do
  if [ -d "$d" ] && [ "$d" != "common" ]
  then
    index+=1
    setupList+="${index} $d\n"
    setups+=($d)
  fi
done
# filter completed trusted setups
for i in "${!setups[@]}"
do
  # check directory have required files
  if [[ -f ${setups[$i]}/proving.key && -f ${setups[$i]}/verification.key ]]
  then
    completedSetups+=${setups[$i]}
    completedSetupList+="${setups[$i]} "
  fi
done
popd

# this function will generate setup which user seleceted
generateSetups(){
  selectedSetupsIndexes=$(echo $selectedSetupsIndexes | tr "," "\n")
  for i in $selectedSetupsIndexes
  do
    npm run setup -- -f ${ZKPScheme}/${setups[$i-1]} -s ${ZKPScheme}
  done
}

printf "${GREEN}*** List of trusted setups ***${NC}\n"
printf "${setupList}"

if [[ ${#completedSetups[@]} != 0 ]]
then
  printf "${GREEN}Completed trusted setups are: ${NC}"
  printf "${completedSetupList}"
fi

while true
do
  read -p $'\n''Do you want to generate all trusted setups? (y/n) : ' yn
  case $yn in
    [Yy]* ) npm run setupAll
      exit
      ;;
    [Nn]* ) printf "\nType the number of each trusted setup seperated by a comma\n"
      read -p "(E.g. type "1,2" to run the trusted setups for ${setups[0]} & ${setups[1]}) : " selectedSetupsIndexes
      generateSetups
      exit
      ;;
    * ) printf "Please answer yes or no.\n"
      ;;
  esac
done
