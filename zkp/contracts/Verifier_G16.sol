/**
CREDITS:

// For the Elliptic Curve Pairing operations and functions verify() and verifyCalculation():
// This file is MIT Licensed.
//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// More information at https://gist.github.com/chriseth/f9be9d9391efc5beb9704255a8e2989d

Minor edits for Nightfall by:
HenryFour
*/

pragma solidity ^0.5.0;

import "./Ownable.sol";
import "./Pairing.sol";

/**
@title Verifier
@dev This contract mainly refers to the verifier.sol generated by zokrates and nightfall's gm17 verifier.sol.
@dev Example Verifier Implementation - G16 proof verification.
@notice Do not use this example in any production code!
*/
contract Verifier_G16 is Ownable {

    using Pairing for *;

    struct VerifyingKey {
        Pairing.G1Point a;
        Pairing.G2Point b;
        Pairing.G2Point gamma;
        Pairing.G2Point delta;
        Pairing.G1Point[] gamma_abc;
    }

    struct Proof {
        Pairing.G1Point a;
        Pairing.G2Point b;
        Pairing.G1Point c;
    }

    function doVerify(Proof memory proof, uint256[] memory input, VerifyingKey memory vk) internal returns (uint) {
        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
        require(input.length + 1 == vk.gamma_abc.length, "Length of inputs[] or vk.query is incorrect!");
        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
        for (uint i = 0; i < input.length; i++) {
            require(input[i] < snark_scalar_field);
            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.gamma_abc[i + 1], input[i]));
        }
        vk_x = Pairing.addition(vk_x, vk.gamma_abc[0]);
        if (!Pairing.pairingProd4(
            proof.a, proof.b,
            Pairing.negate(vk_x), vk.gamma,
            Pairing.negate(proof.c), vk.delta,
            Pairing.negate(vk.a), vk.b)) {
            return 1;
        }
        return 0;
    }

    // compatible with Verifier_Interface
    function verify(uint256[] memory _proof, uint256[] memory _inputs, uint256[] memory _vk) public returns (bool result) {
        Proof memory proof;
        proof.a = Pairing.G1Point(_proof[0], _proof[1]);
        proof.b = Pairing.G2Point([_proof[2], _proof[3]], [_proof[4], _proof[5]]);
        proof.c = Pairing.G1Point(_proof[6], _proof[7]);

        VerifyingKey memory vk;
        // todo: compare gas cost of vk in memory to storage  (refer to Verifier_GM17.sol).
        vk.a = Pairing.G1Point(_vk[0], _vk[1]);
        vk.b = Pairing.G2Point([_vk[2], _vk[3]], [_vk[4], _vk[5]]);
        vk.gamma = Pairing.G2Point([_vk[6], _vk[7]], [_vk[8], _vk[9]]);
        vk.delta = Pairing.G2Point([_vk[10], _vk[11]], [_vk[12], _vk[13]]);
        vk.gamma_abc = new Pairing.G1Point[]((_vk.length - 14) / 2);
        uint j = 0;
        for (uint i = 14; i < _vk.length; i += 2) {
            vk.gamma_abc[j++] = Pairing.G1Point(_vk[i], _vk[i + 1]);
        }

        if (doVerify(proof, _inputs, vk) == 0) {
            result = true;
        } else {
            result = false;
        }
    }
}
